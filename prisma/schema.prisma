generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum VehicleStatus {
  AVAILABLE
  SOLD
  PENDING
  RESERVED // Added for when user shows interest
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
  CNG
}

enum DriveType {
  FWD
  RWD
  AWD
  FOUR_WD
}

enum OwnershipStatus {
  PENDING // User registered interest
  APPROVED // Ownership approved
  REJECTED // Ownership rejected
  COMPLETED // Transaction completed
}

// User model - enhanced
model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  phoneNumber String?
  DOB         DateTime?
  gender      Gender?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  ownedCars  CarOwnership[]
  ownedBikes BikeOwnership[]
}

// Dealer/Company model for "listedBy"
model Dealer {
  id        Int      @id @default(autoincrement())
  name      String   @unique // e.g., "GC Motors", "AutoMax"
  email     String?  @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cars  Car[]
  bikes Bike[]
}

model Car {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  status      VehicleStatus @default(AVAILABLE)

  sellingPrice Float
  cutOffPrice  Float
  ybtPrice     Float

  registrationYear   Int
  registrationNumber String  @unique
  manufactureYear    Int?
  kmsDriven          Int
  ownerCount         Int
  insurance          String?

  dealerId        Int // Foreign key to Dealer
  dealer          Dealer     @relation(fields: [dealerId], references: [id])
  badges          String[]
  vipNumber       Boolean    @default(false)
  city            String?
  state           String?
  brand           String?
  carUSP          String?
  carType         String?
  transmission    String?
  exteriorColour  String?
  peakTorque      String?
  peakPower       String?
  doors           Int?
  driveType       DriveType?
  seatingCapacity Int?
  engine          String?
  fuelType        FuelType   @default(PETROL)
  mileage         Float?
  thumbnail       String?
  carImages       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerships CarOwnership[]

  leads BookingLead[]

  @@index([title])
  @@index([brand])
  @@index([createdAt, id])
  @@index([status])
  @@index([dealerId])
}

// Enhanced Bike model
model Bike {
  id                 Int           @id @default(autoincrement())
  title              String
  registrationYear   Int
  kmsDriven          Int
  ownerCount         Int
  badges             String[]
  description        String?
  registrationNumber String        @unique
  vipNumber          Boolean       @default(false)
  sellingPrice       Float
  cutOffPrice        Float
  ybtPrice           Float
  brand              String?
  insurance          String?
  bikeUSP            String?
  fuelType           String
  bikeImages         String[]
  thumbnail          String?
  status             VehicleStatus @default(AVAILABLE)

  // Dealer relation
  dealerId Int
  dealer   Dealer @relation(fields: [dealerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownerships BikeOwnership[]

  @@index([title])
  @@index([brand])
  @@index([status])
  @@index([dealerId])
}

// Car ownership tracking
model CarOwnership {
  id     Int             @id @default(autoincrement())
  userId Int
  user   User            @relation(fields: [userId], references: [id])
  carId  Int
  car    Car             @relation(fields: [carId], references: [id])
  status OwnershipStatus @default(PENDING)
  notes  String? // Admin notes

  // Timeline
  requestedAt DateTime  @default(now())
  approvedAt  DateTime?
  completedAt DateTime?

  @@unique([userId, carId]) // User can only have one ownership record per car
  @@index([userId])
  @@index([carId])
  @@index([status])
}

// Bike ownership tracking
model BikeOwnership {
  id     Int             @id @default(autoincrement())
  userId Int
  user   User            @relation(fields: [userId], references: [id])
  bikeId Int
  bike   Bike            @relation(fields: [bikeId], references: [id])
  status OwnershipStatus @default(PENDING)
  notes  String? // Admin notes

  // Timeline
  requestedAt DateTime  @default(now())
  approvedAt  DateTime?
  completedAt DateTime?

  @@unique([userId, bikeId]) // User can only have one ownership record per bike
  @@index([userId])
  @@index([bikeId])
  @@index([status])
}

model BookingLead {
  id    Int @id @default(autoincrement())
  carId Int
  car   Car @relation(fields: [carId], references: [id])

  // Guest's contact information from the form
  name    String
  email   String
  phone   String
  address String?

  status String  @default("NEW") // e.g., NEW, CONTACTED, CLOSED
  notes  String? // Admin notes

  createdAt DateTime @default(now())

  @@index([carId])
  @@index([email])
}

model Event {
  id               String   @id @default(cuid())
  title            String
  slug             String   @unique
  description      String?
  maxAttendees     Int?
  currentAttendees Int
  location         String
  startDate        DateTime
  endDate          DateTime
  imageUrls        String[]
  primaryImage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("events")
}
